{
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "schemes": ["http", "https"],
  "swagger": "2.0",
  "info": {
    "description": "API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)\nSchemes:\nhttp",
    "title": "Alertmanager API",
    "contact": {
      "name": "Grafana Labs",
      "url": "https://grafana.com",
      "email": "hello@grafana.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/alerts": {
      "get": {
        "description": "Get a list of alerts",
        "tags": ["alert"],
        "operationId": "getAlerts",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "Active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter alerts by",
            "name": "Filter",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "Inhibited",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "Receiver",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "Silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show unprocessed alerts",
            "name": "Unprocessed",
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Create new Alerts",
        "tags": ["alert"],
        "operationId": "postAlerts",
        "parameters": [
          {
            "description": "The alerts to create",
            "name": "Alerts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postableAlerts"
            }
          }
        ]
      }
    },
    "/alerts/groups": {
      "get": {
        "description": "Get a list of alert groups",
        "tags": ["alertgroup"],
        "operationId": "getAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "Active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter alerts by",
            "name": "Filter",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "Inhibited",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "Receiver",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "Silenced",
            "in": "query"
          }
        ]
      }
    },
    "/api/alertmanager/{Recipient}/api/v2/alerts": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": ["alertmanager"],
        "operationId": "RouteGetAMAlerts",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of matchers to filter alerts by",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "receiver",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableAlerts",
            "schema": {
              "$ref": "#/definitions/GettableAlerts"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "create alertmanager alerts",
        "tags": ["alertmanager"],
        "operationId": "RoutePostAMAlerts",
        "parameters": [
          {
            "name": "PostableAlerts",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/postableAlert"
              }
            }
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/{Recipient}/api/v2/alerts/groups": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": ["alertmanager"],
        "operationId": "RouteGetAMAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of matchers to filter alerts by",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "receiver",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AlertGroups",
            "schema": {
              "$ref": "#/definitions/AlertGroups"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/{Recipient}/api/v2/silence/{SilenceId}": {
      "get": {
        "description": "get silence",
        "tags": ["alertmanager"],
        "operationId": "RouteGetSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableSilence",
            "schema": {
              "$ref": "#/definitions/GettableSilence"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "description": "delete silence",
        "tags": ["alertmanager"],
        "operationId": "RouteDeleteSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/{Recipient}/api/v2/silences": {
      "get": {
        "description": "get silences",
        "tags": ["alertmanager"],
        "operationId": "RouteGetSilences",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableSilences",
            "schema": {
              "$ref": "#/definitions/GettableSilences"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "create silence",
        "tags": ["alertmanager"],
        "operationId": "RouteCreateSilence",
        "parameters": [
          {
            "name": "Silence",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/postableSilence"
            }
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "GettableSilence",
            "schema": {
              "$ref": "#/definitions/GettableSilence"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/{Recipient}/api/v2/status": {
      "get": {
        "description": "get alertmanager status and configuration",
        "tags": ["alertmanager"],
        "operationId": "RouteGetAMStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableStatus",
            "schema": {
              "$ref": "#/definitions/GettableStatus"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/{Recipient}/config/api/v1/alerts": {
      "get": {
        "description": "gets an Alerting config",
        "tags": ["alertmanager"],
        "operationId": "RouteGetAlertingConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableUserConfig",
            "schema": {
              "$ref": "#/definitions/GettableUserConfig"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "sets an Alerting config",
        "tags": ["alertmanager"],
        "operationId": "RoutePostAlertingConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostableUserConfig"
            }
          },
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "description": "deletes the Alerting config for a tenant",
        "tags": ["alertmanager"],
        "operationId": "RouteDeleteAlertingConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/prometheus/{Recipient}/api/v1/alerts": {
      "get": {
        "description": "gets the current alerts",
        "tags": ["prometheus"],
        "operationId": "RouteGetAlertStatuses",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          }
        }
      }
    },
    "/api/prometheus/{Recipient}/api/v1/rules": {
      "get": {
        "description": "gets the evaluation statuses of all rules",
        "tags": ["prometheus"],
        "operationId": "RouteGetRuleStatuses",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "RuleResponse",
            "schema": {
              "$ref": "#/definitions/RuleResponse"
            }
          }
        }
      }
    },
    "/api/ruler/{Recipient}/api/v1/rules": {
      "get": {
        "description": "List rule groups",
        "produces": ["application/json"],
        "tags": ["ruler"],
        "operationId": "RouteGetRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          }
        }
      }
    },
    "/api/ruler/{Recipient}/api/v1/rules/{Namespace}": {
      "get": {
        "description": "Get rule groups by namespace",
        "produces": ["application/json"],
        "tags": ["ruler"],
        "operationId": "RouteGetNamespaceRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates or updates a rule group",
        "consumes": ["application/json", "application/yaml"],
        "tags": ["ruler"],
        "operationId": "RoutePostNameRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostableRuleGroupConfig"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      },
      "delete": {
        "description": "Delete namespace",
        "tags": ["ruler"],
        "operationId": "RouteDeleteNamespaceRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      }
    },
    "/api/ruler/{Recipient}/api/v1/rules/{Namespace}/{Groupname}": {
      "get": {
        "description": "Get rule group",
        "produces": ["application/json"],
        "tags": ["ruler"],
        "operationId": "RouteGetRulegGroupConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "RuleGroupConfigResponse",
            "schema": {
              "$ref": "#/definitions/RuleGroupConfigResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete rule group",
        "tags": ["ruler"],
        "operationId": "RouteDeleteRuleGroupConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      }
    },
    "/api/v1/eval": {
      "post": {
        "description": "Test rule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["testing"],
        "operationId": "RouteEvalQueries",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EvalQueriesPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EvalQueriesResponse",
            "schema": {
              "$ref": "#/definitions/EvalQueriesResponse"
            }
          }
        }
      }
    },
    "/api/v1/receiver/test/{Recipient}": {
      "post": {
        "description": "Test receiver",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["testing"],
        "operationId": "RouteTestReceiverConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExtendedReceiver"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "412": {
            "description": "SmtpNotEnabled",
            "schema": {
              "$ref": "#/definitions/SmtpNotEnabled"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/api/v1/rule/test/{Recipient}": {
      "post": {
        "description": "Test rule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["testing"],
        "operationId": "RouteTestRuleConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Recipient should be \"grafana\" for requests to be handled by grafana\nand the numeric datasource id for requests to be forwarded to a datasource",
            "name": "Recipient",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TestRulePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TestRuleResponse",
            "schema": {
              "$ref": "#/definitions/TestRuleResponse"
            }
          }
        }
      }
    },
    "/dashboards/db": {
      "post": {
        "description": "Creates a new dashboard or updates an existing dashboard.",
        "tags": ["dashboards"],
        "summary": "Create / Update dashboard",
        "operationId": "postDashboard",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SaveDashboardCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PostDashboardResponse",
            "schema": {
              "$ref": "#/definitions/PostDashboardResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "412": {
            "$ref": "#/responses/preconditionFailedError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/home": {
      "get": {
        "description": "Get home dashboard",
        "tags": ["dashboards"],
        "operationId": "getHomeDashboard",
        "responses": {
          "200": {
            "description": "GetHomeDashboardResponse",
            "schema": {
              "$ref": "#/definitions/GetHomeDashboardResponse"
            }
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/uid/{uid}": {
      "get": {
        "description": "Will return the dashboard given the dashboard unique identifier (uid).",
        "tags": ["dashboards"],
        "summary": "Get dashboard by uid",
        "operationId": "getDashboardByUID",
        "parameters": [
          {
            "maxLength": 40,
            "type": "string",
            "description": "The unique identifier (uid) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\nIt’s automatically generated if not provided when creating a dashboard. The uid allows having consistent URL’s for accessing\ndashboards and when syncing dashboards between multiple Grafana installs. This means that changing the title of a dashboard\nwill not break any bookmarked links to that dashboard.",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardResponse",
            "schema": {
              "$ref": "#/definitions/DashboardResponse"
            }
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "Will delete the dashboard given the specified unique identifier (uid).",
        "tags": ["dashboards"],
        "summary": "Delete dashboard by uid",
        "operationId": "deleteDashboardByUID",
        "parameters": [
          {
            "maxLength": 40,
            "type": "string",
            "description": "The unique identifier (uid) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\nIt’s automatically generated if not provided when creating a dashboard. The uid allows having consistent URL’s for accessing\ndashboards and when syncing dashboards between multiple Grafana installs. This means that changing the title of a dashboard\nwill not break any bookmarked links to that dashboard.",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDashboardResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/receivers": {
      "get": {
        "description": "Get list of all receivers (name of notification integrations)",
        "tags": ["receiver"],
        "operationId": "getReceivers"
      }
    },
    "/silence/{silenceID}": {
      "get": {
        "description": "Get a silence by its ID",
        "tags": ["silence"],
        "operationId": "getSilence",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the silence to get",
            "name": "SilenceID",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "Delete a silence by its ID",
        "tags": ["silence"],
        "operationId": "deleteSilence",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the silence to get",
            "name": "SilenceID",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/silences": {
      "get": {
        "description": "Get a list of silences",
        "tags": ["silence"],
        "operationId": "getSilences",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter silences by",
            "name": "Filter",
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Post a new silence or update an existing one",
        "tags": ["silence"],
        "operationId": "postSilences",
        "parameters": [
          {
            "description": "The silence to create",
            "name": "Silence",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postableSilence"
            }
          }
        ]
      }
    },
    "/status": {
      "get": {
        "description": "Get current status of an Alertmanager instance and its cluster",
        "tags": ["general"],
        "operationId": "getStatus"
      }
    }
  },
  "definitions": {
    "Ack": {
      "type": "object"
    },
    "Alert": {
      "type": "object",
      "title": "Alert has info for an alert.",
      "required": ["labels", "annotations", "state", "value"],
      "properties": {
        "activeAt": {
          "type": "string",
          "format": "date-time"
        },
        "annotations": {
          "$ref": "#/definitions/labels"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "state": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AlertDiscovery": {
      "type": "object",
      "title": "AlertDiscovery has info for all active alerts.",
      "required": ["alerts"],
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          }
        }
      }
    },
    "AlertGroup": {
      "$ref": "#/definitions/alertGroup"
    },
    "AlertGroups": {
      "$ref": "#/definitions/AlertGroups"
    },
    "AlertInstancesResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "description": "Instances is an array of arrow encoded dataframes\neach frame has a single row, and a column for each instance (alert identified by unique labels) with a boolean value (firing/not firing)",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            }
          }
        }
      }
    },
    "AlertQuery": {
      "type": "object",
      "title": "AlertQuery represents a single query associated with an alert definition.",
      "properties": {
        "datasourceUid": {
          "description": "Grafana data source unique identifier; it should be '-100' for a Server Side Expression operation.",
          "type": "string"
        },
        "model": {
          "description": "JSON is the raw JSON query and includes the above properties as well as custom properties.",
          "type": "object"
        },
        "queryType": {
          "description": "QueryType is an optional identifier for the type of query.\nIt can be used to distinguish different types of queries.",
          "type": "string"
        },
        "refId": {
          "description": "RefID is the unique identifier of the query, set by the frontend call.",
          "type": "string"
        },
        "relativeTimeRange": {
          "$ref": "#/definitions/RelativeTimeRange"
        }
      }
    },
    "AlertResponse": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "data": {
          "$ref": "#/definitions/AlertDiscovery"
        },
        "error": {
          "type": "string"
        },
        "errorType": {
          "$ref": "#/definitions/ErrorType"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "AlertingRule": {
      "description": "adapted from cortex",
      "type": "object",
      "required": ["name", "query", "health", "type", "state", "annotations", "alerts"],
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          }
        },
        "annotations": {
          "$ref": "#/definitions/labels"
        },
        "duration": {
          "type": "number",
          "format": "double"
        },
        "evaluationTime": {
          "type": "number",
          "format": "double"
        },
        "health": {
          "type": "string"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "lastError": {
          "type": "string"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "state": {
          "description": "State can be \"pending\", \"firing\", \"inactive\".",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/RuleType"
        }
      }
    },
    "ApiRuleNode": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "expr": {
          "type": "string"
        },
        "for": {
          "$ref": "#/definitions/Duration"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "record": {
          "type": "string"
        }
      }
    },
    "Authorization": {
      "type": "object",
      "title": "Authorization contains HTTP authorization credentials.",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/Secret"
        },
        "credentials_file": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "BasicAuth": {
      "type": "object",
      "title": "BasicAuth contains basic HTTP authentication credentials.",
      "properties": {
        "password": {
          "$ref": "#/definitions/Secret"
        },
        "password_file": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Config": {
      "type": "object",
      "title": "Config is the top-level configuration for Alertmanager's config files.",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          }
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DashboardMeta": {
      "type": "object",
      "properties": {
        "canAdmin": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canSave": {
          "type": "boolean"
        },
        "canStar": {
          "type": "boolean"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        },
        "folderId": {
          "type": "integer",
          "format": "int64"
        },
        "folderTitle": {
          "type": "string"
        },
        "folderUid": {
          "type": "string"
        },
        "folderUrl": {
          "type": "string"
        },
        "hasAcl": {
          "type": "boolean"
        },
        "isFolder": {
          "type": "boolean"
        },
        "isHome": {
          "type": "boolean"
        },
        "isSnapshot": {
          "type": "boolean"
        },
        "isStarred": {
          "type": "boolean"
        },
        "provisioned": {
          "type": "boolean"
        },
        "provisionedExternalId": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DashboardRedirect": {
      "type": "object",
      "required": ["redirectUri"],
      "properties": {
        "redirectUri": {
          "description": "RedirectUri The redirect URI",
          "type": "string"
        }
      }
    },
    "DashboardResponse": {
      "type": "object",
      "title": "It is the full dashboard response with metadata.",
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "meta": {
          "$ref": "#/definitions/DashboardMeta"
        }
      }
    },
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time"
    },
    "DiscoveryBase": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "error": {
          "type": "string"
        },
        "errorType": {
          "$ref": "#/definitions/ErrorType"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Duration": {
      "type": "integer",
      "format": "int64",
      "title": "Duration is a type used for marshalling durations.",
      "$ref": "#/definitions/Duration"
    },
    "EmailConfig": {
      "type": "object",
      "title": "EmailConfig configures notifications via mail.",
      "properties": {
        "auth_identity": {
          "type": "string"
        },
        "auth_password": {
          "$ref": "#/definitions/Secret"
        },
        "auth_secret": {
          "$ref": "#/definitions/Secret"
        },
        "auth_username": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hello": {
          "type": "string"
        },
        "html": {
          "type": "string"
        },
        "require_tls": {
          "type": "boolean"
        },
        "send_resolved": {
          "type": "boolean"
        },
        "smarthost": {
          "$ref": "#/definitions/HostPort"
        },
        "text": {
          "type": "string"
        },
        "tls_config": {
          "$ref": "#/definitions/TLSConfig"
        },
        "to": {
          "description": "Email address to notify.",
          "type": "string"
        }
      }
    },
    "ErrorType": {
      "type": "string",
      "title": "ErrorType models the different API error types."
    },
    "EvalAlertConditionCommand": {
      "description": "EvalAlertConditionCommand is the command for evaluating a condition",
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          }
        },
        "now": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EvalQueriesPayload": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          }
        },
        "now": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EvalQueriesResponse": {
      "$ref": "#/definitions/EvalQueriesResponse"
    },
    "ExtendedReceiver": {
      "type": "object",
      "properties": {
        "email_configs": {
          "$ref": "#/definitions/EmailConfig"
        },
        "grafana_managed_receiver": {
          "$ref": "#/definitions/PostableGrafanaReceiver"
        },
        "opsgenie_configs": {
          "$ref": "#/definitions/OpsGenieConfig"
        },
        "pagerduty_configs": {
          "$ref": "#/definitions/PagerdutyConfig"
        },
        "pushover_configs": {
          "$ref": "#/definitions/PushoverConfig"
        },
        "slack_configs": {
          "$ref": "#/definitions/SlackConfig"
        },
        "victorops_configs": {
          "$ref": "#/definitions/VictorOpsConfig"
        },
        "webhook_configs": {
          "$ref": "#/definitions/WebhookConfig"
        },
        "wechat_configs": {
          "$ref": "#/definitions/WechatConfig"
        }
      }
    },
    "Failure": {
      "$ref": "#/definitions/ResponseDetails"
    },
    "GetHomeDashboardResponse": {
      "title": "Get home dashboard response.",
      "allOf": [
        {
          "$ref": "#/definitions/DashboardResponse"
        },
        {
          "$ref": "#/definitions/DashboardRedirect"
        }
      ]
    },
    "GettableAlert": {
      "$ref": "#/definitions/GettableAlert"
    },
    "GettableAlerts": {
      "$ref": "#/definitions/GettableAlerts"
    },
    "GettableApiAlertingConfig": {
      "type": "object",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          }
        },
        "receivers": {
          "description": "Override with our superset receiver type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableApiReceiver"
          }
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GettableApiReceiver": {
      "type": "object",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          }
        },
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableGrafanaReceiver"
          }
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          }
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          }
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          }
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          }
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          }
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          }
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          }
        }
      }
    },
    "GettableExtendedRuleNode": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "expr": {
          "type": "string"
        },
        "for": {
          "$ref": "#/definitions/Duration"
        },
        "grafana_alert": {
          "$ref": "#/definitions/GettableGrafanaRule"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "record": {
          "type": "string"
        }
      }
    },
    "GettableGrafanaReceiver": {
      "type": "object",
      "properties": {
        "disableResolveMessage": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "secureFields": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "settings": {
          "$ref": "#/definitions/Json"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "GettableGrafanaReceivers": {
      "type": "object",
      "properties": {
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableGrafanaReceiver"
          }
        }
      }
    },
    "GettableGrafanaRule": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          }
        },
        "exec_err_state": {
          "type": "string",
          "enum": ["Alerting"]
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "intervalSeconds": {
          "type": "integer",
          "format": "int64"
        },
        "namespace_id": {
          "type": "integer",
          "format": "int64"
        },
        "namespace_uid": {
          "type": "string"
        },
        "no_data_state": {
          "type": "string",
          "enum": ["Alerting", "NoData", "OK"]
        },
        "orgId": {
          "type": "integer",
          "format": "int64"
        },
        "rule_group": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GettableRuleGroupConfig": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/Duration"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableExtendedRuleNode"
          }
        }
      }
    },
    "GettableSilence": {
      "$ref": "#/definitions/gettableSilence"
    },
    "GettableSilences": {
      "$ref": "#/definitions/gettableSilences"
    },
    "GettableStatus": {
      "type": "object",
      "required": ["cluster", "config", "uptime", "versionInfo"],
      "properties": {
        "cluster": {
          "$ref": "#/definitions/clusterStatus"
        },
        "config": {
          "$ref": "#/definitions/PostableApiAlertingConfig"
        },
        "uptime": {
          "description": "uptime",
          "type": "string",
          "format": "date-time"
        },
        "versionInfo": {
          "$ref": "#/definitions/versionInfo"
        }
      }
    },
    "GettableUserConfig": {
      "type": "object",
      "properties": {
        "alertmanager_config": {
          "$ref": "#/definitions/GettableApiAlertingConfig"
        },
        "template_files": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "GlobalConfig": {
      "description": "GlobalConfig defines configuration parameters that are valid globally\nunless overwritten.",
      "type": "object",
      "properties": {
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "opsgenie_api_key": {
          "$ref": "#/definitions/Secret"
        },
        "opsgenie_api_url": {
          "$ref": "#/definitions/URL"
        },
        "pagerduty_url": {
          "$ref": "#/definitions/URL"
        },
        "resolve_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "slack_api_url": {
          "$ref": "#/definitions/SecretURL"
        },
        "slack_api_url_file": {
          "type": "string"
        },
        "smtp_auth_identity": {
          "type": "string"
        },
        "smtp_auth_password": {
          "$ref": "#/definitions/Secret"
        },
        "smtp_auth_secret": {
          "$ref": "#/definitions/Secret"
        },
        "smtp_auth_username": {
          "type": "string"
        },
        "smtp_from": {
          "type": "string"
        },
        "smtp_hello": {
          "type": "string"
        },
        "smtp_require_tls": {
          "type": "boolean"
        },
        "smtp_smarthost": {
          "$ref": "#/definitions/HostPort"
        },
        "victorops_api_key": {
          "$ref": "#/definitions/Secret"
        },
        "victorops_api_url": {
          "$ref": "#/definitions/URL"
        },
        "wechat_api_corp_id": {
          "type": "string"
        },
        "wechat_api_secret": {
          "$ref": "#/definitions/Secret"
        },
        "wechat_api_url": {
          "$ref": "#/definitions/URL"
        }
      }
    },
    "HTTPClientConfig": {
      "type": "object",
      "title": "HTTPClientConfig configures an HTTP client.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/Authorization"
        },
        "basic_auth": {
          "$ref": "#/definitions/BasicAuth"
        },
        "bearer_token": {
          "$ref": "#/definitions/Secret"
        },
        "bearer_token_file": {
          "description": "The bearer token file for the targets. Deprecated in favour of\nAuthorization.CredentialsFile.",
          "type": "string"
        },
        "follow_redirects": {
          "description": "FollowRedirects specifies whether the client should follow HTTP 3xx redirects.\nThe omitempty flag is not set, because it would be hidden from the\nmarshalled configuration when set to false.",
          "type": "boolean"
        },
        "oauth2": {
          "$ref": "#/definitions/OAuth2"
        },
        "proxy_url": {
          "$ref": "#/definitions/URL"
        },
        "tls_config": {
          "$ref": "#/definitions/TLSConfig"
        }
      }
    },
    "HostPort": {
      "type": "object",
      "title": "HostPort represents a \"host:port\" network address.",
      "properties": {
        "Host": {
          "type": "string"
        },
        "Port": {
          "type": "string"
        }
      }
    },
    "InhibitRule": {
      "description": "InhibitRule defines an inhibition rule that mutes alerts that match the\ntarget labels if an alert matching the source labels exists.\nBoth alerts have to have a set of labels being equal.",
      "type": "object",
      "properties": {
        "equal": {
          "$ref": "#/definitions/LabelNames"
        },
        "source_match": {
          "description": "SourceMatch defines a set of labels that have to equal the given\nvalue for source alerts. Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "source_match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "source_matchers": {
          "$ref": "#/definitions/Matchers"
        },
        "target_match": {
          "description": "TargetMatch defines a set of labels that have to equal the given\nvalue for target alerts. Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "target_match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "target_matchers": {
          "$ref": "#/definitions/Matchers"
        }
      }
    },
    "Json": {
      "description": "Json",
      "type": "object"
    },
    "Label": {
      "type": "object",
      "title": "Label is a key/value pair of strings.",
      "properties": {
        "Name": {
          "type": "string"
        }
      }
    },
    "LabelName": {
      "description": "A LabelName is a key for a LabelSet or Metric.  It has a value associated\ntherewith.",
      "type": "string"
    },
    "LabelNames": {
      "type": "array",
      "title": "LabelNames is a sortable LabelName slice. In implements sort.Interface.",
      "items": {
        "$ref": "#/definitions/LabelName"
      }
    },
    "Labels": {
      "description": "Labels is a sorted set of labels. Order has to be guaranteed upon\ninstantiation.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Label"
      }
    },
    "MatchRegexps": {
      "type": "object",
      "title": "MatchRegexps represents a map of Regexp.",
      "additionalProperties": {
        "$ref": "#/definitions/Regexp"
      }
    },
    "MatchType": {
      "type": "integer",
      "format": "int64",
      "title": "MatchType is an enum for label matching types."
    },
    "Matcher": {
      "type": "object",
      "title": "Matcher models the matching of a label.",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/MatchType"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "Matchers": {
      "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Matcher"
      },
      "$ref": "#/definitions/Matchers"
    },
    "NamespaceConfigResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/GettableRuleGroupConfig"
        }
      }
    },
    "NotifierConfig": {
      "type": "object",
      "title": "NotifierConfig contains base options common across all notifier configurations.",
      "properties": {
        "send_resolved": {
          "type": "boolean"
        }
      }
    },
    "OAuth2": {
      "type": "object",
      "title": "OAuth2 is the oauth2 client configuration.",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "$ref": "#/definitions/Secret"
        },
        "client_secret_file": {
          "type": "string"
        },
        "endpoint_params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token_url": {
          "type": "string"
        }
      }
    },
    "OpsGenieConfig": {
      "type": "object",
      "title": "OpsGenieConfig configures notifications via OpsGenie.",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "description": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "responders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfigResponder"
          }
        },
        "send_resolved": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        }
      }
    },
    "OpsGenieConfigResponder": {
      "type": "object",
      "properties": {
        "id": {
          "description": "One of those 3 should be filled.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "description": "team, user, escalation, schedule etc.",
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "PagerdutyConfig": {
      "type": "object",
      "title": "PagerdutyConfig configures notifications via PagerDuty.",
      "properties": {
        "class": {
          "type": "string"
        },
        "client": {
          "type": "string"
        },
        "client_url": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "group": {
          "type": "string"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyImage"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyLink"
          }
        },
        "routing_key": {
          "$ref": "#/definitions/Secret"
        },
        "send_resolved": {
          "type": "boolean"
        },
        "service_key": {
          "$ref": "#/definitions/Secret"
        },
        "severity": {
          "type": "string"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      }
    },
    "PagerdutyImage": {
      "description": "PagerdutyImage is an image",
      "type": "object",
      "properties": {
        "alt": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "src": {
          "type": "string"
        }
      }
    },
    "PagerdutyLink": {
      "description": "PagerdutyLink is a link",
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "Point": {
      "type": "object",
      "title": "Point represents a single data point for a given timestamp.",
      "properties": {
        "T": {
          "type": "integer",
          "format": "int64"
        },
        "V": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PostDashboardResponse": {
      "type": "object",
      "title": "Create/update dashboard response.",
      "required": ["status", "title", "version", "uid", "url"],
      "properties": {
        "status": {
          "description": "Status status of the response.",
          "type": "string",
          "example": "success"
        },
        "title": {
          "description": "Slug The slug of the dashboard.",
          "type": "string",
          "example": "my-dashboard"
        },
        "uid": {
          "description": "UID The unique identifier (uid) of the created/updated dashboard.",
          "type": "string",
          "example": "nHz3SXiiz"
        },
        "url": {
          "description": "URL The relative URL for accessing the created/updated dashboard.",
          "type": "string",
          "example": "/d/nHz3SXiiz/my-dashboard"
        },
        "version": {
          "description": "Version The version of the dashboard.",
          "type": "integer",
          "format": "int64",
          "example": 2
        }
      }
    },
    "PostSilencesOKBody": {
      "description": "PostSilencesOKBody post silences o k body",
      "type": "object",
      "properties": {
        "silenceID": {
          "description": "silence ID",
          "type": "string"
        }
      }
    },
    "PostableApiAlertingConfig": {
      "type": "object",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          }
        },
        "receivers": {
          "description": "Override with our superset receiver type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostableApiReceiver"
          }
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PostableApiReceiver": {
      "type": "object",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          }
        },
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostableGrafanaReceiver"
          }
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          }
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          }
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          }
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          }
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          }
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          }
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          }
        }
      }
    },
    "PostableExtendedRuleNode": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "expr": {
          "type": "string"
        },
        "for": {
          "$ref": "#/definitions/Duration"
        },
        "grafana_alert": {
          "$ref": "#/definitions/PostableGrafanaRule"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "record": {
          "type": "string"
        }
      }
    },
    "PostableGrafanaReceiver": {
      "type": "object",
      "properties": {
        "disableResolveMessage": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "secureSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "settings": {
          "$ref": "#/definitions/Json"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "PostableGrafanaReceivers": {
      "type": "object",
      "properties": {
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostableGrafanaReceiver"
          }
        }
      }
    },
    "PostableGrafanaRule": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          }
        },
        "exec_err_state": {
          "type": "string",
          "enum": ["Alerting"]
        },
        "no_data_state": {
          "type": "string",
          "enum": ["Alerting", "NoData", "OK"]
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "PostableRuleGroupConfig": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/Duration"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostableExtendedRuleNode"
          }
        }
      }
    },
    "PostableSilence": {
      "$ref": "#/definitions/postableSilence"
    },
    "PostableUserConfig": {
      "type": "object",
      "properties": {
        "alertmanager_config": {
          "$ref": "#/definitions/PostableApiAlertingConfig"
        },
        "template_files": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PushoverConfig": {
      "type": "object",
      "properties": {
        "expire": {
          "$ref": "#/definitions/duration"
        },
        "html": {
          "type": "boolean"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "retry": {
          "$ref": "#/definitions/duration"
        },
        "send_resolved": {
          "type": "boolean"
        },
        "sound": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/Secret"
        },
        "url": {
          "type": "string"
        },
        "url_title": {
          "type": "string"
        },
        "user_key": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "Receiver": {
      "type": "object",
      "title": "Receiver configuration provides configuration on how to contact a receiver.",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          }
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          }
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          }
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          }
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          }
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          }
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          }
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          }
        }
      },
      "$ref": "#/definitions/Receiver"
    },
    "Regexp": {
      "description": "A Regexp is safe for concurrent use by multiple goroutines,\nexcept for configuration methods, such as Longest.",
      "type": "object",
      "title": "Regexp is the representation of a compiled regular expression."
    },
    "RelativeTimeRange": {
      "description": "RelativeTimeRange is the per query start and end time\nfor requests.",
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/Duration"
        },
        "to": {
          "$ref": "#/definitions/Duration"
        }
      }
    },
    "ResponseDetails": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "Route": {
      "type": "object",
      "title": "A Route is a node that contains definitions of how to handle alerts.",
      "properties": {
        "continue": {
          "type": "boolean"
        },
        "group_by": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group_interval": {
          "$ref": "#/definitions/Duration"
        },
        "group_wait": {
          "$ref": "#/definitions/Duration"
        },
        "match": {
          "description": "Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "matchers": {
          "$ref": "#/definitions/Matchers"
        },
        "mute_time_intervals": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "receiver": {
          "type": "string"
        },
        "repeat_interval": {
          "$ref": "#/definitions/Duration"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Route"
          }
        }
      }
    },
    "Rule": {
      "description": "adapted from cortex",
      "type": "object",
      "required": ["name", "query", "health", "type"],
      "properties": {
        "evaluationTime": {
          "type": "number",
          "format": "double"
        },
        "health": {
          "type": "string"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "lastError": {
          "type": "string"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/RuleType"
        }
      }
    },
    "RuleDiscovery": {
      "type": "object",
      "required": ["groups"],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleGroup"
          }
        }
      }
    },
    "RuleGroup": {
      "type": "object",
      "required": ["name", "file", "rules", "interval"],
      "properties": {
        "evaluationTime": {
          "type": "number",
          "format": "double"
        },
        "file": {
          "type": "string"
        },
        "interval": {
          "type": "number",
          "format": "double"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "description": "In order to preserve rule ordering, while exposing type (alerting or recording)\nspecific properties, both alerting and recording rules are exposed in the\nsame array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertingRule"
          }
        }
      }
    },
    "RuleGroupConfigResponse": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/Duration"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableExtendedRuleNode"
          }
        }
      }
    },
    "RuleResponse": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "data": {
          "$ref": "#/definitions/RuleDiscovery"
        },
        "error": {
          "type": "string"
        },
        "errorType": {
          "$ref": "#/definitions/ErrorType"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "RuleType": {
      "type": "string",
      "title": "RuleType models the type of a rule."
    },
    "Sample": {
      "type": "object",
      "title": "Sample is a single sample belonging to a metric.",
      "properties": {
        "Metric": {
          "$ref": "#/definitions/Labels"
        },
        "T": {
          "type": "integer",
          "format": "int64"
        },
        "V": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SaveDashboardCommand": {
      "type": "object",
      "required": ["dashboard"],
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "folderId": {
          "type": "integer",
          "format": "int64"
        },
        "folderUid": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "overwrite": {
          "type": "boolean"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Secret": {
      "type": "string",
      "title": "Secret special type for storing secrets."
    },
    "SecretURL": {
      "title": "SecretURL is a URL that must not be revealed on marshaling.",
      "$ref": "#/definitions/URL"
    },
    "SlackAction": {
      "description": "See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons\nfor more information.",
      "type": "object",
      "title": "SlackAction configures a single Slack action that is sent with each notification.",
      "properties": {
        "confirm": {
          "$ref": "#/definitions/SlackConfirmationField"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SlackConfig": {
      "type": "object",
      "title": "SlackConfig configures notifications via Slack.",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackAction"
          }
        },
        "api_url": {
          "$ref": "#/definitions/SecretURL"
        },
        "api_url_file": {
          "type": "string"
        },
        "callback_id": {
          "type": "string"
        },
        "channel": {
          "description": "Slack channel override, (like #other-channel or @username).",
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "fallback": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackField"
          }
        },
        "footer": {
          "type": "string"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "icon_emoji": {
          "type": "string"
        },
        "icon_url": {
          "type": "string"
        },
        "image_url": {
          "type": "string"
        },
        "link_names": {
          "type": "boolean"
        },
        "mrkdwn_in": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pretext": {
          "type": "string"
        },
        "send_resolved": {
          "type": "boolean"
        },
        "short_fields": {
          "type": "boolean"
        },
        "text": {
          "type": "string"
        },
        "thumb_url": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "title_link": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "SlackConfirmationField": {
      "description": "SlackConfirmationField protect users from destructive actions or particularly distinguished decisions\nby asking them to confirm their button click one more time.\nSee https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.",
      "type": "object",
      "properties": {
        "dismiss_text": {
          "type": "string"
        },
        "ok_text": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "SlackField": {
      "description": "Each field must contain a title, value, and optionally, a boolean value to indicate if the field\nis short enough to be displayed next to other fields designated as short.\nSee https://api.slack.com/docs/message-attachments#fields for more information.",
      "type": "object",
      "title": "SlackField configures a single Slack field that is sent with each notification.",
      "properties": {
        "short": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SmtpNotEnabled": {
      "$ref": "#/definitions/ResponseDetails"
    },
    "Success": {
      "$ref": "#/definitions/ResponseDetails"
    },
    "TLSConfig": {
      "type": "object",
      "title": "TLSConfig configures the options for TLS connections.",
      "properties": {
        "ca_file": {
          "description": "The CA cert to use for the targets.",
          "type": "string"
        },
        "cert_file": {
          "description": "The client cert file for the targets.",
          "type": "string"
        },
        "insecure_skip_verify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "key_file": {
          "description": "The client key file for the targets.",
          "type": "string"
        },
        "server_name": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      }
    },
    "TestRulePayload": {
      "type": "object",
      "properties": {
        "expr": {
          "type": "string",
          "example": "(node_filesystem_avail_bytes{fstype!=\"\",job=\"integrations/node_exporter\"} node_filesystem_size_bytes{fstype!=\"\",job=\"integrations/node_exporter\"} * 100 \u003c 5 and node_filesystem_readonly{fstype!=\"\",job=\"integrations/node_exporter\"} == 0)"
        },
        "grafana_condition": {
          "$ref": "#/definitions/EvalAlertConditionCommand"
        }
      }
    },
    "TestRuleResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "$ref": "#/definitions/Vector"
        },
        "grafana_alert_instances": {
          "$ref": "#/definitions/AlertInstancesResponse"
        }
      }
    },
    "URL": {
      "type": "object",
      "title": "URL is a custom URL type that allows validation at configuration load time.",
      "properties": {
        "ForceQuery": {
          "type": "boolean"
        },
        "Fragment": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "Opaque": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "RawFragment": {
          "type": "string"
        },
        "RawPath": {
          "type": "string"
        },
        "RawQuery": {
          "type": "string"
        },
        "Scheme": {
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/Userinfo"
        }
      }
    },
    "Userinfo": {
      "description": "The Userinfo type is an immutable encapsulation of username and\npassword details for a URL. An existing Userinfo value is guaranteed\nto have a username set (potentially empty, as allowed by RFC 2396),\nand optionally a password.",
      "type": "object"
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "Vector": {
      "description": "Vector is basically only an alias for model.Samples, but the\ncontract is that in a Vector, all Samples have the same timestamp.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Sample"
      }
    },
    "VictorOpsConfig": {
      "type": "object",
      "title": "VictorOpsConfig configures notifications via VictorOps.",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/Secret"
        },
        "api_key_file": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "custom_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "entity_display_name": {
          "type": "string"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message_type": {
          "type": "string"
        },
        "monitoring_tool": {
          "type": "string"
        },
        "routing_key": {
          "type": "string"
        },
        "send_resolved": {
          "type": "boolean"
        },
        "state_message": {
          "type": "string"
        }
      }
    },
    "WebhookConfig": {
      "type": "object",
      "title": "WebhookConfig configures notifications via a generic webhook.",
      "properties": {
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "max_alerts": {
          "description": "MaxAlerts is the maximum number of alerts to be sent per webhook message.\nAlerts exceeding this threshold will be truncated. Setting this to 0\nallows an unlimited number of alerts.",
          "type": "integer",
          "format": "uint64"
        },
        "send_resolved": {
          "type": "boolean"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      }
    },
    "WechatConfig": {
      "type": "object",
      "title": "WechatConfig configures notifications via Wechat.",
      "properties": {
        "agent_id": {
          "type": "string"
        },
        "api_secret": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "corp_id": {
          "type": "string"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string"
        },
        "message_type": {
          "type": "string"
        },
        "send_resolved": {
          "type": "boolean"
        },
        "to_party": {
          "type": "string"
        },
        "to_tag": {
          "type": "string"
        },
        "to_user": {
          "type": "string"
        }
      }
    },
    "alert": {
      "description": "Alert alert",
      "type": "object",
      "required": ["labels"],
      "properties": {
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        }
      }
    },
    "alertGroup": {
      "description": "AlertGroup alert group",
      "type": "object",
      "required": ["alerts", "labels", "receiver"],
      "properties": {
        "alerts": {
          "description": "alerts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableAlert"
          }
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receiver": {
          "$ref": "#/definitions/receiver"
        }
      }
    },
    "alertGroups": {
      "description": "AlertGroups alert groups",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AlertGroup"
      }
    },
    "alertStatus": {
      "description": "AlertStatus alert status",
      "type": "object",
      "required": ["inhibitedBy", "silencedBy", "state"],
      "properties": {
        "inhibitedBy": {
          "description": "inhibited by",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "silencedBy": {
          "description": "silenced by",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "description": "state",
          "type": "string",
          "enum": ["[unprocessed active suppressed]"]
        }
      }
    },
    "alertmanagerConfig": {
      "description": "AlertmanagerConfig alertmanager config",
      "type": "object",
      "required": ["original"],
      "properties": {
        "original": {
          "description": "original",
          "type": "string"
        }
      }
    },
    "alertmanagerStatus": {
      "description": "AlertmanagerStatus alertmanager status",
      "type": "object",
      "required": ["cluster", "config", "uptime", "versionInfo"],
      "properties": {
        "cluster": {
          "$ref": "#/definitions/clusterStatus"
        },
        "config": {
          "$ref": "#/definitions/alertmanagerConfig"
        },
        "uptime": {
          "description": "uptime",
          "type": "string",
          "format": "date-time"
        },
        "versionInfo": {
          "$ref": "#/definitions/versionInfo"
        }
      }
    },
    "clusterStatus": {
      "description": "ClusterStatus cluster status",
      "type": "object",
      "required": ["status"],
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        },
        "peers": {
          "description": "peers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/peerStatus"
          }
        },
        "status": {
          "description": "status",
          "type": "string",
          "enum": ["[ready settling disabled]"]
        }
      }
    },
    "duration": {
      "$ref": "#/definitions/Duration"
    },
    "gettableAlert": {
      "description": "GettableAlert gettable alert",
      "type": "object",
      "required": ["labels", "annotations", "endsAt", "fingerprint", "receivers", "startsAt", "status", "updatedAt"],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "fingerprint": {
          "description": "fingerprint",
          "type": "string"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receivers": {
          "description": "receivers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Receiver"
          }
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/alertStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gettableAlerts": {
      "description": "GettableAlerts gettable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GettableAlert"
      }
    },
    "gettableSilence": {
      "description": "GettableSilence gettable silence",
      "type": "object",
      "required": ["comment", "createdBy", "endsAt", "matchers", "startsAt", "id", "status", "updatedAt"],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string"
        },
        "createdBy": {
          "description": "created by",
          "type": "string"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/silenceStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gettableSilences": {
      "description": "GettableSilences gettable silences",
      "type": "array",
      "items": {
        "$ref": "#/definitions/gettableSilence"
      }
    },
    "labelSet": {
      "description": "LabelSet label set",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "labels": {
      "description": "The custom marshaling for labels.Labels ends up doing this anyways.",
      "type": "object",
      "title": "override the labels type with a map for generation.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "matcher": {
      "description": "Matcher matcher",
      "type": "object",
      "required": ["isRegex", "name", "value"],
      "properties": {
        "isEqual": {
          "description": "is equal",
          "type": "boolean"
        },
        "isRegex": {
          "description": "is regex",
          "type": "boolean"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "value": {
          "description": "value",
          "type": "string"
        }
      }
    },
    "matchers": {
      "description": "Matchers matchers",
      "type": "array",
      "items": {
        "$ref": "#/definitions/matcher"
      }
    },
    "peerStatus": {
      "description": "PeerStatus peer status",
      "type": "object",
      "required": ["address", "name"],
      "properties": {
        "address": {
          "description": "address",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        }
      }
    },
    "postableAlert": {
      "description": "PostableAlert postable alert",
      "type": "object",
      "required": ["labels"],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at\nFormat: date-time",
          "type": "string",
          "format": "date-time"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "startsAt": {
          "description": "starts at\nFormat: date-time",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "postableAlerts": {
      "description": "PostableAlerts postable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/postableAlert"
      }
    },
    "postableSilence": {
      "description": "PostableSilence postable silence",
      "type": "object",
      "required": ["comment", "createdBy", "endsAt", "matchers", "startsAt"],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string"
        },
        "createdBy": {
          "description": "created by",
          "type": "string"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "receiver": {
      "description": "Receiver receiver",
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        }
      }
    },
    "silence": {
      "description": "Silence silence",
      "type": "object",
      "required": ["comment", "createdBy", "endsAt", "matchers", "startsAt"],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string"
        },
        "createdBy": {
          "description": "created by",
          "type": "string"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "silenceStatus": {
      "description": "SilenceStatus silence status",
      "type": "object",
      "required": ["state"],
      "properties": {
        "state": {
          "description": "state",
          "type": "string",
          "enum": ["[expired active pending]"]
        }
      }
    },
    "versionInfo": {
      "description": "VersionInfo version info",
      "type": "object",
      "required": ["branch", "buildDate", "buildUser", "goVersion", "revision", "version"],
      "properties": {
        "branch": {
          "description": "branch",
          "type": "string"
        },
        "buildDate": {
          "description": "build date",
          "type": "string"
        },
        "buildUser": {
          "description": "build user",
          "type": "string"
        },
        "goVersion": {
          "description": "go version",
          "type": "string"
        },
        "revision": {
          "description": "revision",
          "type": "string"
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "DeleteDashboardResponse": {
      "description": "The response when successfully deleting a dashboard.",
      "schema": {
        "type": "object",
        "required": ["id", "title"],
        "properties": {
          "id": {
            "description": "ID Identifier of the deleted dashboard.",
            "type": "integer",
            "format": "int64",
            "example": 65
          },
          "title": {
            "description": "Message Message of the deleted dashboard.",
            "type": "string",
            "example": "Dashboard My Dashboard deleted"
          }
        }
      }
    },
    "badRequestError": {
      "description": "BadRequestError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    },
    "deleteSilenceInternalServerError": {
      "description": "DeleteSilenceInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "deleteSilenceOK": {
      "description": "DeleteSilenceOK Delete silence response"
    },
    "forbiddenError": {
      "description": "ForbiddenError Insufficient permission to access the requested resource.",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    },
    "genericError": {
      "description": "A GenericError is the default error message that is generated.\nFor certain status codes there are more appropriate error structures.",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    },
    "getAlertGroupsBadRequest": {
      "description": "GetAlertGroupsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertGroupsInternalServerError": {
      "description": "GetAlertGroupsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertGroupsOK": {
      "description": "GetAlertGroupsOK Get alert groups response",
      "schema": {
        "$ref": "#/definitions/alertGroups"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getAlertsBadRequest": {
      "description": "GetAlertsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertsInternalServerError": {
      "description": "GetAlertsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertsOK": {
      "description": "GetAlertsOK Get alerts response",
      "schema": {
        "$ref": "#/definitions/GettableAlerts"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getReceiversOK": {
      "description": "GetReceiversOK Get receivers response",
      "headers": {
        "body": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/receiver"
          },
          "description": "In: Body"
        }
      }
    },
    "getSilenceInternalServerError": {
      "description": "GetSilenceInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getSilenceNotFound": {
      "description": "GetSilenceNotFound A silence with the specified ID was not found"
    },
    "getSilenceOK": {
      "description": "GetSilenceOK Get silence response",
      "schema": {
        "$ref": "#/definitions/gettableSilence"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getSilencesInternalServerError": {
      "description": "GetSilencesInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getSilencesOK": {
      "description": "GetSilencesOK Get silences response",
      "schema": {
        "$ref": "#/definitions/GettableSilences"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getStatusOK": {
      "description": "GetStatusOK Get status response",
      "schema": {
        "$ref": "#/definitions/alertmanagerStatus"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "internalServerError": {
      "description": "InternalServerError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    },
    "notFoundError": {
      "description": "NotFoundError Requested resource was not found",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    },
    "okResponse": {
      "description": "OKResponse",
      "schema": {
        "type": "object"
      }
    },
    "postAlertsBadRequest": {
      "description": "PostAlertsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postAlertsInternalServerError": {
      "description": "PostAlertsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postAlertsOK": {
      "description": "PostAlertsOK Create alerts response"
    },
    "postSilencesBadRequest": {
      "description": "PostSilencesBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postSilencesNotFound": {
      "description": "PostSilencesNotFound A silence with the specified ID was not found",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postSilencesOK": {
      "description": "PostSilencesOK Create / update silence response",
      "schema": {
        "$ref": "#/definitions/PostSilencesOKBody"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "preconditionFailedError": {
      "description": "PreconditionFailedError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    },
    "unauthorisedError": {
      "description": "UnauthorizedError Unauthorized to access the requested resource",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    },
    "unprocessableEntityError": {
      "description": "UnprocessableEntityError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "x-tagGroups": [
    {
      "name": "General",
      "tags": ["dashboards"]
    },
    {
      "name": "Server Administration",
      "tags": ["adminSettings", "global_users"]
    }
  ]
}
